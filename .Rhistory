#'
#' @export
vizWithSCE <- function(dat, which) {
stopifnot(all(names(dat) == c("res", "dds", "sce")))
## missing code for taking label and logcounts from sce
# log counts? dat$sce => extracts log counts, but which gene?
# gene according to 'which' => number of the gene in 'res' ranked by adjusted p-value
res <- dat$res
dds <- dat$dds
sce <- dat$sce
o <- order(res$padj)
o[which] # top 'which' gene
gene <-rownames(res)[o[which]] # name of the top 'which' gene
stopifnot(gene %in% rownames(sce))
sce # this has log counts => index it by the name of the gene with the top 'which' adjusted p-value
label <- colLabels(sce)
df <- data.frame(label=colLabels(sce), logcounts=logcounts(sce)[gene,])
ggplot(df, aes(label,logcounts)) + geom_violin(scale="width") + geom_line(scale="width", alpha=.5)
}
vizWithSCE(dat, which=2)
#'
#' \dontrun{
#' dat <- integrateWithSingleCell(res,dds)
#' vizWithSCE(dat, which=1)
#' }
#'
#' @author Michael Love
#' @author Kwame Forbes
#'
#' @export
vizWithSCE <- function(dat, which) {
stopifnot(all(names(dat) == c("res", "dds", "sce")))
## missing code for taking label and logcounts from sce
# log counts? dat$sce => extracts log counts, but which gene?
# gene according to 'which' => number of the gene in 'res' ranked by adjusted p-value
res <- dat$res
dds <- dat$dds
sce <- dat$sce
o <- order(res$padj)
o[which] # top 'which' gene
gene <-rownames(res)[o[which]] # name of the top 'which' gene
stopifnot(gene %in% rownames(sce))
sce # this has log counts => index it by the name of the gene with the top 'which' adjusted p-value
label <- colLabels(sce)
df <- data.frame(label=colLabels(sce), logcounts=logcounts(sce)[gene,])
ggplot(df, aes(label,logcounts)) + geom_violin(scale="width") + geom_bar(scale="width", alpha=.5)
}
vizWithSCE(dat, which=2)
#'
#' \dontrun{
#' dat <- integrateWithSingleCell(res,dds)
#' vizWithSCE(dat, which=1)
#' }
#'
#' @author Michael Love
#' @author Kwame Forbes
#'
#' @export
vizWithSCE <- function(dat, which) {
stopifnot(all(names(dat) == c("res", "dds", "sce")))
## missing code for taking label and logcounts from sce
# log counts? dat$sce => extracts log counts, but which gene?
# gene according to 'which' => number of the gene in 'res' ranked by adjusted p-value
res <- dat$res
dds <- dat$dds
sce <- dat$sce
o <- order(res$padj)
o[which] # top 'which' gene
gene <-rownames(res)[o[which]] # name of the top 'which' gene
stopifnot(gene %in% rownames(sce))
sce # this has log counts => index it by the name of the gene with the top 'which' adjusted p-value
label <- colLabels(sce)
df <- data.frame(label=colLabels(sce), logcounts=logcounts(sce)[gene,])
ggplot(df, aes(label,logcounts)) + geom_violin(scale="width") + geom_area(scale="width", alpha=.5)
}
vizWithSCE(dat, which=2)
#'
#' \dontrun{
#' dat <- integrateWithSingleCell(res,dds)
#' vizWithSCE(dat, which=1)
#' }
#'
#' @author Michael Love
#' @author Kwame Forbes
#'
#' @export
vizWithSCE <- function(dat, which) {
stopifnot(all(names(dat) == c("res", "dds", "sce")))
## missing code for taking label and logcounts from sce
# log counts? dat$sce => extracts log counts, but which gene?
# gene according to 'which' => number of the gene in 'res' ranked by adjusted p-value
res <- dat$res
dds <- dat$dds
sce <- dat$sce
o <- order(res$padj)
o[which] # top 'which' gene
gene <-rownames(res)[o[which]] # name of the top 'which' gene
stopifnot(gene %in% rownames(sce))
sce # this has log counts => index it by the name of the gene with the top 'which' adjusted p-value
label <- colLabels(sce)
df <- data.frame(label=colLabels(sce), logcounts=logcounts(sce)[gene,])
ggplot(df, aes(label,logcounts)) + geom_violin(scale="width") + geom_point(scale="width", alpha=.5)
}
vizWithSCE(dat, which=2)
#'
#' \dontrun{
#' dat <- integrateWithSingleCell(res,dds)
#' vizWithSCE(dat, which=1)
#' }
#'
#' @author Michael Love
#' @author Kwame Forbes
#'
#' @export
vizWithSCE <- function(dat, which) {
stopifnot(all(names(dat) == c("res", "dds", "sce")))
## missing code for taking label and logcounts from sce
# log counts? dat$sce => extracts log counts, but which gene?
# gene according to 'which' => number of the gene in 'res' ranked by adjusted p-value
res <- dat$res
dds <- dat$dds
sce <- dat$sce
o <- order(res$padj)
o[which] # top 'which' gene
gene <-rownames(res)[o[which]] # name of the top 'which' gene
stopifnot(gene %in% rownames(sce))
sce # this has log counts => index it by the name of the gene with the top 'which' adjusted p-value
label <- colLabels(sce)
df <- data.frame(label=colLabels(sce), logcounts=logcounts(sce)[gene,])
ggplot(df, aes(label,logcounts)) + geom_violin(scale="width") + geom_sina(scale="width", alpha=.5)
}
vizWithSCE(dat, which=2)
ggplot(df, aes(label,logcounts)) + geom_violin(scale="width") + geom_jitter(height = 0, width = 0.1)# + geom_(scale="width", alpha=.5)
#'
#' \dontrun{
#' dat <- integrateWithSingleCell(res,dds)
#' vizWithSCE(dat, which=1)
#' }
#'
#' @author Michael Love
#' @author Kwame Forbes
#'
#' @export
vizWithSCE <- function(dat, which) {
stopifnot(all(names(dat) == c("res", "dds", "sce")))
## missing code for taking label and logcounts from sce
# log counts? dat$sce => extracts log counts, but which gene?
# gene according to 'which' => number of the gene in 'res' ranked by adjusted p-value
res <- dat$res
dds <- dat$dds
sce <- dat$sce
o <- order(res$padj)
o[which] # top 'which' gene
gene <-rownames(res)[o[which]] # name of the top 'which' gene
stopifnot(gene %in% rownames(sce))
sce # this has log counts => index it by the name of the gene with the top 'which' adjusted p-value
label <- colLabels(sce)
df <- data.frame(label=colLabels(sce), logcounts=logcounts(sce)[gene,])
ggplot(df, aes(label,logcounts)) + geom_violin(scale="width") + geom_jitter(height = 0, width = 0.1)# + geom_(scale="width", alpha=.5)
}
vizWithSCE(dat, which=2)
#'
#' \dontrun{
#' dat <- integrateWithSingleCell(res,dds)
#' vizWithSCE(dat, which=1)
#' }
#'
#' @author Michael Love
#' @author Kwame Forbes
#'
#' @export
vizWithSCE <- function(dat, which) {
stopifnot(all(names(dat) == c("res", "dds", "sce")))
## missing code for taking label and logcounts from sce
# log counts? dat$sce => extracts log counts, but which gene?
# gene according to 'which' => number of the gene in 'res' ranked by adjusted p-value
res <- dat$res
dds <- dat$dds
sce <- dat$sce
o <- order(res$padj)
o[which] # top 'which' gene
gene <-rownames(res)[o[which]] # name of the top 'which' gene
stopifnot(gene %in% rownames(sce))
sce # this has log counts => index it by the name of the gene with the top 'which' adjusted p-value
label <- colLabels(sce)
df <- data.frame(label=colLabels(sce), logcounts=logcounts(sce)[gene,])
ggforce::geom_sina
ggplot(df, aes(label,logcounts)) + geom_violin(scale="width") + geom_jitter(height = 0, width = 0.1)# + geom_(scale="width", alpha=.5)
}
vizWithSCE(dat, which=2)
#'
#' \dontrun{
#' dat <- integrateWithSingleCell(res,dds)
#' vizWithSCE(dat, which=1)
#' }
#'
#' @author Michael Love
#' @author Kwame Forbes
#'
#' @export
vizWithSCE <- function(dat, which) {
stopifnot(all(names(dat) == c("res", "dds", "sce")))
## missing code for taking label and logcounts from sce
# log counts? dat$sce => extracts log counts, but which gene?
# gene according to 'which' => number of the gene in 'res' ranked by adjusted p-value
res <- dat$res
dds <- dat$dds
sce <- dat$sce
o <- order(res$padj)
o[which] # top 'which' gene
gene <-rownames(res)[o[which]] # name of the top 'which' gene
stopifnot(gene %in% rownames(sce))
sce # this has log counts => index it by the name of the gene with the top 'which' adjusted p-value
label <- colLabels(sce)
df <- data.frame(label=colLabels(sce), logcounts=logcounts(sce)[gene,])
ggforce::geom_sina
ggplot(df, aes(label,logcounts)) + geom_violin(scale="width") + geom_jitter(height = 0, width = 0.1)# + geom_(scale="width", alpha=.5)
}
vizWithSCE(dat, which=2)
#'
#' \dontrun{
#' dat <- integrateWithSingleCell(res,dds)
#' vizWithSCE(dat, which=1)
#' }
#'
#' @author Michael Love
#' @author Kwame Forbes
#'
#' @export
vizWithSCE <- function(dat, which) {
stopifnot(all(names(dat) == c("res", "dds", "sce")))
## missing code for taking label and logcounts from sce
# log counts? dat$sce => extracts log counts, but which gene?
# gene according to 'which' => number of the gene in 'res' ranked by adjusted p-value
res <- dat$res
dds <- dat$dds
sce <- dat$sce
o <- order(res$padj)
o[which] # top 'which' gene
gene <-rownames(res)[o[which]] # name of the top 'which' gene
stopifnot(gene %in% rownames(sce))
sce # this has log counts => index it by the name of the gene with the top 'which' adjusted p-value
label <- colLabels(sce)
df <- data.frame(label=colLabels(sce), logcounts=logcounts(sce)[gene,])
ggforce::geom_sina
ggplot(df, aes(label,logcounts)) + geom_violin(scale="width") + geom_jitter(height = 0, width = 0.1) + geom_sina(scale="width", alpha=.5)
}
vizWithSCE(dat, which=2)
?geom_sina
#'
#' \dontrun{
#' dat <- integrateWithSingleCell(res,dds)
#' vizWithSCE(dat, which=1)
#' }
#'
#' @author Michael Love
#' @author Kwame Forbes
#'
#' @export
vizWithSCE <- function(dat, which) {
stopifnot(all(names(dat) == c("res", "dds", "sce")))
## missing code for taking label and logcounts from sce
# log counts? dat$sce => extracts log counts, but which gene?
# gene according to 'which' => number of the gene in 'res' ranked by adjusted p-value
res <- dat$res
dds <- dat$dds
sce <- dat$sce
o <- order(res$padj)
o[which] # top 'which' gene
gene <-rownames(res)[o[which]] # name of the top 'which' gene
stopifnot(gene %in% rownames(sce))
sce # this has log counts => index it by the name of the gene with the top 'which' adjusted p-value
label <- colLabels(sce)
df <- data.frame(label=colLabels(sce), logcounts=logcounts(sce)[gene,])
ggforce::geom_sina
ggplot(df, aes(label,logcounts)) + geom_violin(scale="width") + geom_jitter(height = 0, width = 0.1)
geom_sina(scale="width", alpha=.5)
}
vizWithSCE(dat, which=2)
geom_sina
#'
#' \dontrun{
#' dat <- integrateWithSingleCell(res,dds)
#' vizWithSCE(dat, which=1)
#' }
#'
#' @author Michael Love
#' @author Kwame Forbes
#'
#' @export
vizWithSCE <- function(dat, which) {
stopifnot(all(names(dat) == c("res", "dds", "sce")))
## missing code for taking label and logcounts from sce
# log counts? dat$sce => extracts log counts, but which gene?
# gene according to 'which' => number of the gene in 'res' ranked by adjusted p-value
res <- dat$res
dds <- dat$dds
sce <- dat$sce
o <- order(res$padj)
o[which] # top 'which' gene
gene <-rownames(res)[o[which]] # name of the top 'which' gene
stopifnot(gene %in% rownames(sce))
sce # this has log counts => index it by the name of the gene with the top 'which' adjusted p-value
label <- colLabels(sce)
df <- data.frame(label=colLabels(sce), logcounts=logcounts(sce)[gene,])
ggplot(df, aes(label,logcounts)) + geom_violin(scale="width") + geom_jitter(height = 0, width = 0.1)
ggforce::geom_sina(scale="width", alpha=.5)
}
vizWithSCE(dat, which=2)
#'
#' \dontrun{
#' dat <- integrateWithSingleCell(res,dds)
#' vizWithSCE(dat, which=1)
#' }
#'
#' @author Michael Love
#' @author Kwame Forbes
#'
#' @export
vizWithSCE <- function(dat, which) {
stopifnot(all(names(dat) == c("res", "dds", "sce")))
## missing code for taking label and logcounts from sce
# log counts? dat$sce => extracts log counts, but which gene?
# gene according to 'which' => number of the gene in 'res' ranked by adjusted p-value
res <- dat$res
dds <- dat$dds
sce <- dat$sce
o <- order(res$padj)
o[which] # top 'which' gene
gene <-rownames(res)[o[which]] # name of the top 'which' gene
stopifnot(gene %in% rownames(sce))
sce # this has log counts => index it by the name of the gene with the top 'which' adjusted p-value
label <- colLabels(sce)
df <- data.frame(label=colLabels(sce), logcounts=logcounts(sce)[gene,])
ggplot(df, aes(label,logcounts)) + geom_violin(scale="width") + geom_jitter(height = 0, width = 0.1)
ggforce::geom_sina(scale="width", alpha=.5)
}
vizWithSCE(dat, which=2)
#'
#' \dontrun{
#' dat <- integrateWithSingleCell(res,dds)
#' vizWithSCE(dat, which=1)
#' }
#'
#' @author Michael Love
#' @author Kwame Forbes
#'
#' @export
vizWithSCE <- function(dat, which) {
stopifnot(all(names(dat) == c("res", "dds", "sce")))
## missing code for taking label and logcounts from sce
# log counts? dat$sce => extracts log counts, but which gene?
# gene according to 'which' => number of the gene in 'res' ranked by adjusted p-value
res <- dat$res
dds <- dat$dds
sce <- dat$sce
o <- order(res$padj)
o[which] # top 'which' gene
gene <-rownames(res)[o[which]] # name of the top 'which' gene
stopifnot(gene %in% rownames(sce))
sce # this has log counts => index it by the name of the gene with the top 'which' adjusted p-value
label <- colLabels(sce)
df <- data.frame(label=colLabels(sce), logcounts=logcounts(sce)[gene,])
ggplot(df, aes(label,logcounts)) + geom_violin(scale="width") + geom_jitter(height = 0, width = 0.1) +
ggforce::geom_sina(scale="width", alpha=.5)
}
vizWithSCE(dat, which=2)
#'
#' \dontrun{
#' dat <- integrateWithSingleCell(res,dds)
#' vizWithSCE(dat, which=1)
#' }
#'
#' @author Michael Love
#' @author Kwame Forbes
#'
#' @export
vizWithSCE <- function(dat, which) {
stopifnot(all(names(dat) == c("res", "dds", "sce")))
## missing code for taking label and logcounts from sce
# log counts? dat$sce => extracts log counts, but which gene?
# gene according to 'which' => number of the gene in 'res' ranked by adjusted p-value
res <- dat$res
dds <- dat$dds
sce <- dat$sce
o <- order(res$padj)
o[which] # top 'which' gene
gene <-rownames(res)[o[which]] # name of the top 'which' gene
stopifnot(gene %in% rownames(sce))
sce # this has log counts => index it by the name of the gene with the top 'which' adjusted p-value
label <- colLabels(sce)
df <- data.frame(label=colLabels(sce), logcounts=logcounts(sce)[gene,])
ggplot(df, aes(label,logcounts)) + geom_violin(scale="width")  +
ggforce::geom_sina(scale="width", alpha=.5)
}
vizWithSCE(dat, which=2)
install.packages("shiny")
install.packages("shiny")
library("shiny")
runExample("01_hello")
getwd()
runApp("my_app")
library(airway)
data(gse)
levels(gse$condition) <- c("untrt", "trt")
library(DESeq2)
dds <- DESeqDataSet(gse, design = ~donor + condition)
keep <- rowSums(counts(dds) >= 10) >= 3
dds <- dds[keep,]
dds <- DESeq(dds)
res <- results(dds)
rownames(res) <- sub("\\..*","",rownames(res))
library(TENxPBMCData)
library(scater)
tenx_pbmc4k <- TENxPBMCData(dataset = "pbmc4k")
sce <- tenx_pbmc4k
sce <-logNormCounts(sce)
dat <- list(res=res, dds=dds, sce=sce)
library(org.Hs.eg.db)
library(SingleR)
ref <- BlueprintEncodeData()
sce2 <- sce
rownames(sce2) <- mapIds(org.Hs.eg.db, rownames(sce2), "SYMBOL", "ENSEMBL")
pred <- SingleR(test=sce2, ref=ref, labels=ref$label.main)
table(pred$labels)
colLabels(dat$sce) <- pred$labels
library(vizWithSCE)
library(shiny); source('~/Documents/R Studio/app.R')
install.packages("shiny")
source('~/Documents/R Studio/app.R')
install.packages("shiny")
source('~/Documents/R Studio/app.R')
source('~/Documents/R Studio/app.R')
runApp('shinyViz.R')
runApp('shinyViz.R')
runApp('shinyViz.R')
runApp('shinyViz.R')
runApp('shinyViz.R')
runApp('shinyViz.R')
runApp('shinyViz.R')
#'
#' \dontrun{
#' dat <- integrateWithSingleCell(res,dds)
#' vizWithSCE(dat, which=1)
#' }
#'
#' @author Michael Love
#' @author Kwame Forbes
#'
#' @export
vizWithSCE <- function(dat, which) {
stopifnot(all(names(dat) == c("res", "dds", "sce")))
## missing code for taking label and logcounts from sce
# log counts? dat$sce => extracts log counts, but which gene?
# gene according to 'which' => number of the gene in 'res' ranked by adjusted p-value
res <- dat$res
dds <- dat$dds
sce <- dat$sce
o <- order(res$padj)
o[which] # top 'which' gene
gene <-rownames(res)[o[which]] # name of the top 'which' gene
stopifnot(gene %in% rownames(sce))
sce # this has log counts => index it by the name of the gene with the top 'which' adjusted p-value
label <- colLabels(sce)
df <- data.frame(label=colLabels(sce), logcounts=logcounts(sce)[gene,])
ggplot(df, aes(label,logcounts)) + geom_violin(scale="width")  +
ggforce::geom_sina(scale="width", alpha=.5)
}
vizWithSCE(dat, which=2)
runApp('shinyViz.R')
runApp('shinyViz.R')
runApp('shinyViz.R')
runApp('shinyViz.R')
runApp('shinyViz.R')
runApp('shinyViz.R')
runApp('shinyViz.R')
runApp('R/shinyViz.R')
runApp('R/shinyViz.R')
runApp('R/shinyViz.R')
runApp('R/shinyViz.R')
runApp('R/shinyViz.R')
runApp('R/shinyViz.R')
install.packages("pkgdown")
devtools::install_github("r-lib/pkgdown")
usethis::use_pkgdown()
pkgdown::build_site()
devtools::load_all()
pkgdown::build_site()
devtools::load_all()
devtools::load_all()
devtools::load_all()
dat <- integrateWithSingleCell(res, dds)
library(DESeq2)
dat <- integrateWithSingleCell(res, dds)
devtools::load_all()
devtools::load_all()
devtools::build_site()
.Last.error.trace
install.packages("pkgdown")
install.packages("pkgdown")
devtools::install_github("r-lib/pkgdown")
usethis::build_site()
usethis::use_pkgdown()
pkgdown::build_site()
.Last.error.trace
devtools::build_vignettes()
.Last.error.trace
devtools::document()
devtools::document()
devtools::load_all()
devtools::build_vignettes()
pkgdown::build_site()
